// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Post Post
// Example: {"canonicalUrl":"http://jamietalbot.com/posts/liverpool-fc","content":"\u003ch1\u003eLiverpool FC\u003c/h1\u003e\u003cp\u003eYou’ll never walk alone.\u003c/p\u003e","contentFormat":"html","publishStatus":"public","tags":["football","sport","Liverpool"],"title":"Liverpool FC"}
//
// swagger:model Post
type Post struct {

	// The original home of this content, if it was originally published elsewhere.
	CanonicalURL string `json:"canonicalUrl,omitempty"`

	// The body of the post, in a valid, semantic, HTML fragment, or Markdown. Further markups may be supported in the future. For a full list of accepted HTML tags, see here. If you want your title to appear on the post page, you must also include it as part of the post content.
	// Required: true
	Content *string `json:"content"`

	// The format of the "content" field. There are two valid values, "html", and "markdown"
	// Required: true
	ContentFormat *string `json:"contentFormat"`

	// The license of the post. Valid values are `all-rights-reserved`, `cc-40-by`, `cc-40-by-sa`, `cc-40-by-nd`, `cc-40-by-nc`, `cc-40-by-nc-nd`, `cc-40-by-nc-sa`, `cc-40-zero`, `public-domain`. The default is `all-rights-reserved`.
	// Enum: [all-rights-reserved cc-40-by cc-40-by-sa cc-40-by-nd cc-40-by-nc cc-40-by-nc-nd cc-40-by-nc-sa cc-40-zero public-domain]
	License *string `json:"license,omitempty"`

	// The status of the post. Valid values are `public`, `draft`, or `unlisted`. The default is `public`.
	// Enum: [public draft unlisted]
	PublishStatus *string `json:"publishStatus,omitempty"`

	// Tags to classify the post. Only the first three will be used. Tags longer than 25 characters will be ignored.
	Tags []string `json:"tags"`

	// The title of the post. Note that this title is used for SEO and when rendering the post as a listing, but will not appear in the actual post—for that, the title must be specified in the content field as well. Titles longer than 100 characters will be ignored. In that case, a title will be synthesized from the first content in the post when it is published.
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this post
func (m *Post) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Post) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

func (m *Post) validateContentFormat(formats strfmt.Registry) error {

	if err := validate.Required("contentFormat", "body", m.ContentFormat); err != nil {
		return err
	}

	return nil
}

var postTypeLicensePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all-rights-reserved","cc-40-by","cc-40-by-sa","cc-40-by-nd","cc-40-by-nc","cc-40-by-nc-nd","cc-40-by-nc-sa","cc-40-zero","public-domain"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postTypeLicensePropEnum = append(postTypeLicensePropEnum, v)
	}
}

const (

	// PostLicenseAllDashRightsDashReserved captures enum value "all-rights-reserved"
	PostLicenseAllDashRightsDashReserved string = "all-rights-reserved"

	// PostLicenseCcDash40DashBy captures enum value "cc-40-by"
	PostLicenseCcDash40DashBy string = "cc-40-by"

	// PostLicenseCcDash40DashByDashSa captures enum value "cc-40-by-sa"
	PostLicenseCcDash40DashByDashSa string = "cc-40-by-sa"

	// PostLicenseCcDash40DashByDashNd captures enum value "cc-40-by-nd"
	PostLicenseCcDash40DashByDashNd string = "cc-40-by-nd"

	// PostLicenseCcDash40DashByDashNc captures enum value "cc-40-by-nc"
	PostLicenseCcDash40DashByDashNc string = "cc-40-by-nc"

	// PostLicenseCcDash40DashByDashNcDashNd captures enum value "cc-40-by-nc-nd"
	PostLicenseCcDash40DashByDashNcDashNd string = "cc-40-by-nc-nd"

	// PostLicenseCcDash40DashByDashNcDashSa captures enum value "cc-40-by-nc-sa"
	PostLicenseCcDash40DashByDashNcDashSa string = "cc-40-by-nc-sa"

	// PostLicenseCcDash40DashZero captures enum value "cc-40-zero"
	PostLicenseCcDash40DashZero string = "cc-40-zero"

	// PostLicensePublicDashDomain captures enum value "public-domain"
	PostLicensePublicDashDomain string = "public-domain"
)

// prop value enum
func (m *Post) validateLicenseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postTypeLicensePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Post) validateLicense(formats strfmt.Registry) error {
	if swag.IsZero(m.License) { // not required
		return nil
	}

	// value enum
	if err := m.validateLicenseEnum("license", "body", *m.License); err != nil {
		return err
	}

	return nil
}

var postTypePublishStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","draft","unlisted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postTypePublishStatusPropEnum = append(postTypePublishStatusPropEnum, v)
	}
}

const (

	// PostPublishStatusPublic captures enum value "public"
	PostPublishStatusPublic string = "public"

	// PostPublishStatusDraft captures enum value "draft"
	PostPublishStatusDraft string = "draft"

	// PostPublishStatusUnlisted captures enum value "unlisted"
	PostPublishStatusUnlisted string = "unlisted"
)

// prop value enum
func (m *Post) validatePublishStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postTypePublishStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Post) validatePublishStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.PublishStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validatePublishStatusEnum("publishStatus", "body", *m.PublishStatus); err != nil {
		return err
	}

	return nil
}

func (m *Post) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post based on context it is used
func (m *Post) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Post) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Post) UnmarshalBinary(b []byte) error {
	var res Post
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
