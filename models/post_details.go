// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostDetails Post Details
//
// Details of Post
// Example: {"data":{"authorId":"5303d74c64f66366f00cb9b2a94f3251bf5","canonicalUrl":"http://jamietalbot.com/posts/liverpool-fc","id":"e6f36a","license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","publishStatus":"public","publishedAt":1442286338435,"tags":["football","sport","Liverpool"],"title":"Liverpool FC","url":"https://medium.com/@majelbstoat/liverpool-fc-e6f36a"}}
//
// swagger:model PostDetails
type PostDetails struct {

	// The userId of the post’s author
	AuthorID string `json:"authorId,omitempty"`

	// The canonical URL of the post. If canonicalUrl was not specified in the creation of the post, this field will not be present.
	CanonicalURL string `json:"canonicalUrl,omitempty"`

	// A unique identifier for the post.
	ID string `json:"id,omitempty"`

	// The license of the post.
	// Enum: [all-rights-reserved cc-40-by cc-40-by-sa cc-40-by-nd cc-40-by-nc cc-40-by-nc-nd cc-40-by-nc-sa cc-40-zero public-domain]
	License string `json:"license,omitempty"`

	// The URL to the license of the post.
	LicenseURL string `json:"licenseUrl,omitempty"`

	// The publish status of the post.
	PublishStatus string `json:"publishStatus,omitempty"`

	// The post’s published date. If created as a draft, this field will not be present.
	// Format: date
	PublishedAt strfmt.Date `json:"publishedAt,omitempty"`

	// The post’s tags
	Tags []string `json:"tags"`

	// The post’s title
	Title string `json:"title,omitempty"`

	// The URL of the post on Medium
	URL string `json:"url,omitempty"`
}

// Validate validates this post details
func (m *PostDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postDetailsTypeLicensePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all-rights-reserved","cc-40-by","cc-40-by-sa","cc-40-by-nd","cc-40-by-nc","cc-40-by-nc-nd","cc-40-by-nc-sa","cc-40-zero","public-domain"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postDetailsTypeLicensePropEnum = append(postDetailsTypeLicensePropEnum, v)
	}
}

const (

	// PostDetailsLicenseAllDashRightsDashReserved captures enum value "all-rights-reserved"
	PostDetailsLicenseAllDashRightsDashReserved string = "all-rights-reserved"

	// PostDetailsLicenseCcDash40DashBy captures enum value "cc-40-by"
	PostDetailsLicenseCcDash40DashBy string = "cc-40-by"

	// PostDetailsLicenseCcDash40DashByDashSa captures enum value "cc-40-by-sa"
	PostDetailsLicenseCcDash40DashByDashSa string = "cc-40-by-sa"

	// PostDetailsLicenseCcDash40DashByDashNd captures enum value "cc-40-by-nd"
	PostDetailsLicenseCcDash40DashByDashNd string = "cc-40-by-nd"

	// PostDetailsLicenseCcDash40DashByDashNc captures enum value "cc-40-by-nc"
	PostDetailsLicenseCcDash40DashByDashNc string = "cc-40-by-nc"

	// PostDetailsLicenseCcDash40DashByDashNcDashNd captures enum value "cc-40-by-nc-nd"
	PostDetailsLicenseCcDash40DashByDashNcDashNd string = "cc-40-by-nc-nd"

	// PostDetailsLicenseCcDash40DashByDashNcDashSa captures enum value "cc-40-by-nc-sa"
	PostDetailsLicenseCcDash40DashByDashNcDashSa string = "cc-40-by-nc-sa"

	// PostDetailsLicenseCcDash40DashZero captures enum value "cc-40-zero"
	PostDetailsLicenseCcDash40DashZero string = "cc-40-zero"

	// PostDetailsLicensePublicDashDomain captures enum value "public-domain"
	PostDetailsLicensePublicDashDomain string = "public-domain"
)

// prop value enum
func (m *PostDetails) validateLicenseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postDetailsTypeLicensePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PostDetails) validateLicense(formats strfmt.Registry) error {
	if swag.IsZero(m.License) { // not required
		return nil
	}

	// value enum
	if err := m.validateLicenseEnum("license", "body", m.License); err != nil {
		return err
	}

	return nil
}

func (m *PostDetails) validatePublishedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.PublishedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("publishedAt", "body", "date", m.PublishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post details based on context it is used
func (m *PostDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostDetails) UnmarshalBinary(b []byte) error {
	var res PostDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
