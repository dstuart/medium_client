// Code generated by go-swagger; DO NOT EDIT.

package posts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new posts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for posts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PostPublicationsPublicationIDPosts(params *PostPublicationsPublicationIDPostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPublicationsPublicationIDPostsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	PostPublicationsPublicationIDPosts creates publication post

	creating a post and associating it with a publication on Medium. The request also shows this association, considering posts a collection of resources under a publication

There are additional rules around publishing that each request to this API must respect:
  - If the authenticated user is an 'editor' for the publication, they can create posts with any publish status. Posts published as 'public' or 'unlisted' will appear in collection immediately, while posts created as 'draft' will remain in pending state under publication.
  - If the authenticated user is a 'writer' for the chosen publication, they can only create a post as a 'draft'. That post will remain in pending state under publication until an editor for the publication approves it.
  - If the authenticated user is neither a 'writer' nor an 'editor', they are not allowed to create any posts in a publication.
*/
func (a *Client) PostPublicationsPublicationIDPosts(params *PostPublicationsPublicationIDPostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPublicationsPublicationIDPostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublicationsPublicationIDPostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPublicationsPublicationIDPosts",
		Method:             "POST",
		PathPattern:        "/publications/{publicationId}/posts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPublicationsPublicationIDPostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPublicationsPublicationIDPostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPublicationsPublicationIDPosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
