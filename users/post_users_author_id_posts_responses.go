// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dstuart/models"
)

// PostUsersAuthorIDPostsReader is a Reader for the PostUsersAuthorIDPosts structure.
type PostUsersAuthorIDPostsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUsersAuthorIDPostsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUsersAuthorIDPostsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUsersAuthorIDPostsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostUsersAuthorIDPostsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostUsersAuthorIDPostsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /users/{authorId}/posts] PostUsersAuthorIDPosts", response, response.Code())
	}
}

// NewPostUsersAuthorIDPostsOK creates a PostUsersAuthorIDPostsOK with default headers values
func NewPostUsersAuthorIDPostsOK() *PostUsersAuthorIDPostsOK {
	return &PostUsersAuthorIDPostsOK{}
}

/*
PostUsersAuthorIDPostsOK describes a response with status code 200, with default header values.

OK
*/
type PostUsersAuthorIDPostsOK struct {
	Payload *models.PostDetails
}

// IsSuccess returns true when this post users author Id posts o k response has a 2xx status code
func (o *PostUsersAuthorIDPostsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post users author Id posts o k response has a 3xx status code
func (o *PostUsersAuthorIDPostsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users author Id posts o k response has a 4xx status code
func (o *PostUsersAuthorIDPostsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post users author Id posts o k response has a 5xx status code
func (o *PostUsersAuthorIDPostsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post users author Id posts o k response a status code equal to that given
func (o *PostUsersAuthorIDPostsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post users author Id posts o k response
func (o *PostUsersAuthorIDPostsOK) Code() int {
	return 200
}

func (o *PostUsersAuthorIDPostsOK) Error() string {
	return fmt.Sprintf("[POST /users/{authorId}/posts][%d] postUsersAuthorIdPostsOK  %+v", 200, o.Payload)
}

func (o *PostUsersAuthorIDPostsOK) String() string {
	return fmt.Sprintf("[POST /users/{authorId}/posts][%d] postUsersAuthorIdPostsOK  %+v", 200, o.Payload)
}

func (o *PostUsersAuthorIDPostsOK) GetPayload() *models.PostDetails {
	return o.Payload
}

func (o *PostUsersAuthorIDPostsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PostDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersAuthorIDPostsBadRequest creates a PostUsersAuthorIDPostsBadRequest with default headers values
func NewPostUsersAuthorIDPostsBadRequest() *PostUsersAuthorIDPostsBadRequest {
	return &PostUsersAuthorIDPostsBadRequest{}
}

/*
PostUsersAuthorIDPostsBadRequest describes a response with status code 400, with default header values.

Required fields were invalid, not specified.
*/
type PostUsersAuthorIDPostsBadRequest struct {
}

// IsSuccess returns true when this post users author Id posts bad request response has a 2xx status code
func (o *PostUsersAuthorIDPostsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users author Id posts bad request response has a 3xx status code
func (o *PostUsersAuthorIDPostsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users author Id posts bad request response has a 4xx status code
func (o *PostUsersAuthorIDPostsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post users author Id posts bad request response has a 5xx status code
func (o *PostUsersAuthorIDPostsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post users author Id posts bad request response a status code equal to that given
func (o *PostUsersAuthorIDPostsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post users author Id posts bad request response
func (o *PostUsersAuthorIDPostsBadRequest) Code() int {
	return 400
}

func (o *PostUsersAuthorIDPostsBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/{authorId}/posts][%d] postUsersAuthorIdPostsBadRequest ", 400)
}

func (o *PostUsersAuthorIDPostsBadRequest) String() string {
	return fmt.Sprintf("[POST /users/{authorId}/posts][%d] postUsersAuthorIdPostsBadRequest ", 400)
}

func (o *PostUsersAuthorIDPostsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostUsersAuthorIDPostsUnauthorized creates a PostUsersAuthorIDPostsUnauthorized with default headers values
func NewPostUsersAuthorIDPostsUnauthorized() *PostUsersAuthorIDPostsUnauthorized {
	return &PostUsersAuthorIDPostsUnauthorized{}
}

/*
PostUsersAuthorIDPostsUnauthorized describes a response with status code 401, with default header values.

The `accessToken` is invalid or has been revoked.
*/
type PostUsersAuthorIDPostsUnauthorized struct {
}

// IsSuccess returns true when this post users author Id posts unauthorized response has a 2xx status code
func (o *PostUsersAuthorIDPostsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users author Id posts unauthorized response has a 3xx status code
func (o *PostUsersAuthorIDPostsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users author Id posts unauthorized response has a 4xx status code
func (o *PostUsersAuthorIDPostsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post users author Id posts unauthorized response has a 5xx status code
func (o *PostUsersAuthorIDPostsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post users author Id posts unauthorized response a status code equal to that given
func (o *PostUsersAuthorIDPostsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post users author Id posts unauthorized response
func (o *PostUsersAuthorIDPostsUnauthorized) Code() int {
	return 401
}

func (o *PostUsersAuthorIDPostsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /users/{authorId}/posts][%d] postUsersAuthorIdPostsUnauthorized ", 401)
}

func (o *PostUsersAuthorIDPostsUnauthorized) String() string {
	return fmt.Sprintf("[POST /users/{authorId}/posts][%d] postUsersAuthorIdPostsUnauthorized ", 401)
}

func (o *PostUsersAuthorIDPostsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostUsersAuthorIDPostsForbidden creates a PostUsersAuthorIDPostsForbidden with default headers values
func NewPostUsersAuthorIDPostsForbidden() *PostUsersAuthorIDPostsForbidden {
	return &PostUsersAuthorIDPostsForbidden{}
}

/*
PostUsersAuthorIDPostsForbidden describes a response with status code 403, with default header values.

The user does not have permission to publish, or the authorId in the request path points to wrong/non-existent user.
*/
type PostUsersAuthorIDPostsForbidden struct {
}

// IsSuccess returns true when this post users author Id posts forbidden response has a 2xx status code
func (o *PostUsersAuthorIDPostsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post users author Id posts forbidden response has a 3xx status code
func (o *PostUsersAuthorIDPostsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post users author Id posts forbidden response has a 4xx status code
func (o *PostUsersAuthorIDPostsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post users author Id posts forbidden response has a 5xx status code
func (o *PostUsersAuthorIDPostsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post users author Id posts forbidden response a status code equal to that given
func (o *PostUsersAuthorIDPostsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post users author Id posts forbidden response
func (o *PostUsersAuthorIDPostsForbidden) Code() int {
	return 403
}

func (o *PostUsersAuthorIDPostsForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{authorId}/posts][%d] postUsersAuthorIdPostsForbidden ", 403)
}

func (o *PostUsersAuthorIDPostsForbidden) String() string {
	return fmt.Sprintf("[POST /users/{authorId}/posts][%d] postUsersAuthorIdPostsForbidden ", 403)
}

func (o *PostUsersAuthorIDPostsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
